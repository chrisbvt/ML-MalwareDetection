import zipfile
import argparse
import glob2
import os
import shutil
import combine_frames


def process_zip_files(output_directory, input_directory, temp_directory):
    # Make directory if it does not exist
    output_directory = output_directory + "csv_data"
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Process Known Bad
    directory_name_bad = input_directory + "bad/"
    exec_string = "python zip_processing_daemon.py --output_directory %s --temp_directory %s --input_directory \"%s/*\" --good_file %d" % (
        output_directory, temp_directory, directory_name_bad, 0)
    os.system(exec_string)

    # Process Known Good
    directory_name_good = input_directory + "good/"
    exec_string = "python zip_processing_daemon.py --output_directory %s --temp_directory %s --input_directory \"%s/*\" --good_file %d" % (
        output_directory, temp_directory, directory_name_good, 1)
    os.system(exec_string)


def main():
    parser = argparse.ArgumentParser(description="Pipeline Trainer")
    parser.add_argument("--output_directory", help="The directory which the learners are placed", required=True)
    parser.add_argument("--temp_directory", help="Directory for temporarily storing files while processing",
                        required=True)
    parser.add_argument("--input_directory", help="Directory of zipped files", required=True)
    args = parser.parse_args()

    # Process Zip Files #
    # process_zip_files(args.output_directory, args.input_directory, args.temp_directory)

    # Combine CSV Files #
    combined_csv_filename = args.output_directory + "combined.csv"
    csv_directory_name = args.input_directory + "csv_data/"
    total_records = combine_frames.combine_frames(csv_directory_name, combined_csv_filename)

    # Shuffle CSV File #
    os.system("shuf --input-range=1-%d -o %scombined_shuffled.csv < %s" % (total_records, args.output_directory, combined_csv_filename))

if __name__ == "__main__":
    main()