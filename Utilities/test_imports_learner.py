import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
import joblib
from sklearn.metrics import roc_curve
import argparse


def test_learner(data_file, imports_file, learner_file):

    fields = ['imports', 'good_file']
    fields_num = [2, 5]

    #data_file = "../../Desktop/Processed/combined_shuffled_with_header.csv"

    df_parser = pd.read_csv(data_file, chunksize=5000, iterator=True, skipinitialspace=True, usecols=fields_num)

    text_encoding = open(imports_file, 'r').read()
    encoder = CountVectorizer()
    encoder.fit(text_encoding.split())

    count = 0

    learner = joblib.load(learner_file)

    fpr_nn_fin = np.zeros(3)
    tpr_nn_fin = np.zeros(3)

    for df in df_parser:

        if count > 9:
            break
        count += 1
        df.columns = fields
        data_features = df['good_file']
        data_imports = df['imports']
        data_imports_encoded = encoder.transform(data_imports)

        predictions = learner.predict(data_imports_encoded)
        fpr_nn, tpr_nn, thresholds = roc_curve(data_features, predictions)
        print "False Positive Rate for NN " + str(fpr_nn)
        print "True Positive Rate for NN " + str(tpr_nn)
        print "Thresholds: " + str(thresholds)
        print "\n\n"

        fpr_nn_fin += fpr_nn
        tpr_nn_fin += tpr_nn

    print "False Positive Rate for NN " + str(fpr_nn_fin / 10.00000000000)
    print "True Positive Rate for NN " + str(tpr_nn_fin / 10.00000000000)
    print "\n\n"


def main():
    parser = argparse.ArgumentParser(description="Neural Network for Blue Sentry")
    parser.add_argument("--data_file", help="Data file from FileIndexer", required=True)
    parser.add_argument("--imports_file", help="The file which holds the imports prased via the ImportsIndexer", required=True)
    parser.add_argument("--classifier_file", help="The saved classifier", required=True)

    args = parser.parse_args()

    test_learner(args.data_file, args.imports_file, args.classifier_file)

if __name__ == "__main__":
    main()