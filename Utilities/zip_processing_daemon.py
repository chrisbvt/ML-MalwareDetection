import zipfile
import argparse
import glob2
import os
import shutil
import pandas as pd
import numpy

from IPython.display import display


def run_file_indexer(directory_name, output_file, good_file):
    exec_string = "python FileIndexer.py --output_file %s --input_directory %s/* --good_file %d" % (output_file, directory_name, int(good_file))
    os.system(exec_string)

def main():
    parser = argparse.ArgumentParser(description="Zip File Indexer for Blue Sentry")
    parser.add_argument("--output_directory", help="The directory which the index file is written", required=True)
    parser.add_argument("--temp_directory", help="Directory for temporarily storing files while processing", required=True)
    parser.add_argument("--input_directory", help="Directory of zipped files", required=True)
    parser.add_argument("--good_file", help="Number to see if the file is good or bad", required=True)
    args = parser.parse_args()

    files = glob2.glob(args.input_directory)
    currently_processing = []
    for file in files:
        if zipfile.is_zipfile(file):
            temp_file_path = file + "_unzipped"
            print "Extracting: ", file
            filename_output = args.output_directory + "/" + os.path.basename(file).replace(".zip", ".csv")

            #os.system("unzip -q -P infected " + file + " -d " + temp_file_path)
            os.system("unzip -q " + file + " -d " + temp_file_path)
            run_file_indexer(temp_file_path, filename_output, int(args.good_file))
            files_to_process = glob2.glob(temp_file_path + "/*")
            print len(files_to_process)

            shutil.rmtree(temp_file_path + "/")
            #data = pd.read_csv(filename_output)
            #display(data.describe)

if __name__ == "__main__":
    main()

