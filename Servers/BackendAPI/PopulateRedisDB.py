import redis
import argparse
import ConfigParser


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--config_file', help="Configuration File Memory Bank Servers")
    args = parser.parse_args()

    config = ConfigParser.ConfigParser()
    config.read(args.config_file)

    options = config.options('WhitelistServer')

    opts_dict = {}
    for option in options:
        opts_dict[option] = config.get('WhitelistServer', option)

    print opts_dict
    db_host = opts_dict['db_host']
    db_port = opts_dict['db_port']
    data_file = opts_dict['whitelist_file']

    nsrl_file = open(data_file, 'rb')
    r = redis.StrictRedis(host=db_host, port=db_port, db=0)
    pipe = r.pipeline()
    headers = nsrl_file.readline()
    print headers
    count = 0
    sha_to_lookup = ""
    for line in open(data_file, 'rb'):
        if count == 0:
            print "Headers: %s" % str(line)
        else:

            characteristics = line.split(',')
            # print characteristics
            # print characteristics

            sha1 = characteristics[0].replace('"', '')
            sha1 = sha1.replace("'", '')
            # print sha1
            sha_to_lookup = sha1
            md5 = characteristics[1]
            crc32 = characteristics[2]
            filename = characteristics[3]
            filesize = characteristics[4]
            productcode = characteristics[5]
            opsystemcode = characteristics[6]
            specialcode = characteristics[7]

            r.set("%s:md5" % sha1, md5)
            # print pipe.execute()
            '''
            r.set(sha1 + ":crc32", crc32)
            r.set(sha1 + ":filename", filename)
            r.set(sha1 + ":filesize", filesize)
            r.set(sha1 + ":productcode", productcode)
            r.set(sha1 + ":opsystemcode", opsystemcode)
            r.set(sha1 + ":specialcode", specialcode)
            '''
        if count % 100000 == 0:
            print "At index %d" % count



        count += 1

    # sha1 = nsrl_file.readline(1).split()[0]
    # print r.get(sha_to_lookup + ":md5")


if __name__ == "__main__":
    main()