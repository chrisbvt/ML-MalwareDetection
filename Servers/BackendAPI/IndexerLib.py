import glob2
import csv
import hashlib
import os
import pefile
import entropy
import argparse
import magic
import time
import string
import pandas as pd


def get_file_size(FilePath):
    return os.path.getsize(FilePath)


def get_file_signatures(FilePath):
    try:
        pe = pefile.PE(FilePath)

        address = pe.OPTIONAL_HEADER.DATA_DIRECTORY[
            pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_SECURITY']].VirtualAddress
        size = pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_SECURITY']].Size
        if address == 0:
            return 0
        return 1
    except:
        return -1


def get_strings(filename, min_length):
    file_data = open(filename, 'rb')

    strings_list = []

    current = ''
    for character in file_data.read():
        if character in string.printable:
            current += character
        else:
            if len(current) > min_length:
                strings_list.append(current)

            current = ''

    return strings_list


def get_md5_of_file(FilePath):
    return hashlib.md5(FilePath).hexdigest()


def get_sha1(FilePath):
    return hashlib.sha1(FilePath).hexdigest()


def get_sha256_of_file(FilePath):
    return hashlib.sha256(FilePath).hexdigest()


def get_filename_from_path(FilePath):
    FileSplitPath = FilePath.split("\\")
    return FileSplitPath[-1]


def get_file_path(FilePath):
    FileSplitPath = FilePath.split("\\")
    seq = "\\"
    return seq.join(FileSplitPath[0:len(FileSplitPath) - 1])


def get_import_table_entries(FilePath):
    imports = []

    try:
        pe = pefile.PE(FilePath)

        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            # print entry.dll
            for imp in entry.imports:
                imports.append(imp.name)
    except:
        # print "Error: ", filepath
        imports.append("Error")
    return imports


def get_entropy_of_file(FilePath):
    file_read = open(FilePath, 'r')
    file_data = file_read.read()

    entropy_file = entropy.shannon_entropy(file_data)
    file_read.close()
    return entropy_file


def get_type_of_file(FilePath):
    magic_type = magic.from_file(FilePath)

    if 'DLL' in magic_type:
        return 0
    else:
        return 1


def is_pefile(FilePath):
    is_PE = 0
    file_handle = open(FilePath, "rb")

    if file_handle.read(2) == "MZ":
        is_PE = 1
    file_handle.close()

    return is_PE


def get_metadata_from_file(filename):

    size = get_file_size(filename)
    imports = get_import_table_entries(filename)
    sha256 = get_sha256_of_file(filename)
    signed = get_file_signatures(filename)
    entropy = get_entropy_of_file(filename)
    strings = get_strings(filename, 8)
    sha1 = get_sha1(filename)
    md5 = get_md5_of_file(filename)
    data_columns = ['name', 'strings', 'sha256', 'imports', 'size', 'signed', 'good_file', 'entropy']

    data_dict = {'name': filename, 'strings': strings, 'sha256': sha256, 'imports': imports,
                 'size': size, 'signed': signed, 'good_file': 0, 'entropy': entropy}
    pandas_df = pd.DataFrame.from_dict(data_dict, orient='index')
    pandas_df = pandas_df.transpose()
    # pandas_df = pd.DataFrame(data=data_dict, columns=data_columns)

    return sha1, md5, pandas_df
