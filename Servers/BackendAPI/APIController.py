from flask import Flask, jsonify, request, g, url_for, abort, redirect, flash, render_template
from flask_wtf import Form
from werkzeug.utils import secure_filename
from wtforms import FileField

import datetime
import os
import argparse
import ConfigParser
from IndexerLib import *
from OpenSSL import SSL

api_controller = Flask(__name__, template_folder="../BackendAPI/templates")


#Max File Size is 16 mb
api_controller.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024
api_controller.config.from_object('config')


class UploadForm(Form):
    file = FileField('file')


@api_controller.route('/')
@api_controller.route('/api')
@api_controller.route('/api/submit_file', methods=['GET', 'POST'])
def submit_file():
    print "In Submitfile"
    print request
    if request.method == 'POST':
        print "In POST"
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)

        uploaded_file = request.files['file']
        # if user does not select file, browser also
        # submit a empty part without filename

        if uploaded_file:
            filename = secure_filename(uploaded_file.filename)
            uploaded_file.save(os.path.join(api_controller.config['UPLOAD_FOLDER'], filename))
            full_path = os.path.join(api_controller.config['UPLOAD_FOLDER'], filename)
            metadata = jsonify(get_metadata_from_file(full_path))
            os.remove(full_path)
            return render_template('submit.html', message=(metadata), form=UploadForm())
        else:
            return render_template('submit.html', message="File failed to upload", form=UploadForm())

    print "Get: Returning Template"
    return render_template('submit.html', form=UploadForm())

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--config_file', help="Configuration File Memory Bank Servers", required=True)
    args = parser.parse_args()

    config = ConfigParser.ConfigParser()
    config.read(args.config_file)

    options = config.options('APIController')

    opts_dict = {}
    for option in options:
        opts_dict[option] = config.get('APIController', option)

    print opts_dict
    ip = opts_dict['server_ip']
    port = int(opts_dict['port'])
    max_content_length = int(opts_dict['max_content_length']) * 1024 * 1024
    upload_folder = opts_dict['upload_folder']

    context = SSL.Context(SSL.SSLv23_METHOD)
    context = ('server.crt', 'server.key')
    api_controller.config['MAX_CONTENT_LENGTH'] = max_content_length
    api_controller.config['UPLOAD_FOLDER'] = upload_folder
    api_controller.run(debug=True, port=port, host=ip, ssl_context=context)
