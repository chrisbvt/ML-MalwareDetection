from flask import Flask, jsonify, request, g, url_for, abort
import datetime
import argparse
import ConfigParser
import threading
import time
from random import shuffle
from OpenSSL import SSL

SECONDS_IN_HOUR = 4320
memory_bank_server = Flask(__name__)
memory_dict = {}


@memory_bank_server.route('/mb')
def index():
    return "Blue Sentry Memory Bank"


@memory_bank_server.route('/mb/check_memory_bank', methods=['POST'])
def check_in_memory_bank():
    global memory_dict
    sha1 = request.json.get('sha1')
    md5 = request.json.get('md5')

    if sha1 is None or md5 is None:
        abort(400)

    if sha1 in memory_dict:
        memory = memory_dict[sha1][2]
    else:
        abort(404)
        return

    return jsonify({'memory': memory})


@memory_bank_server.route('/mb/push_memory_bank', methods=['POST'])
def push_memory_bank():
    global memory_dict
    sha1 = request.json.get('sha1')
    md5 = request.json.get('md5')
    rating = request.json.get('rating')

    if sha1 is None or md5 is None or rating is None:
        abort(400)

    if sha1 in memory_dict:
        item = memory_dict[sha1]
        item[2] += 1
        item[3] = datetime.datetime.utcnow()
    else:
        memory_dict[sha1] = [md5, rating, 1, datetime.datetime.utcnow()]

    return jsonify({'sha1': sha1, 'md5': md5, 'rating': rating})


def trim_memory_dict(maximum_pool_size):
    while 1:

        global memory_dict

        # Concurrency doesn't really matter here
        temp_dict = {}
        shuffled_keys = shuffle(memory_dict.keys())
        current_keys = 0
        for key in shuffled_keys:
            md5, rating, times_seen, last_seen = memory_dict[key]

            current_time = datetime.datetime.utcnow()
            age = current_time - last_seen
            if age.total_seconds() < SECONDS_IN_HOUR:
                temp_dict[key] = memory_dict[key]
                current_keys += 1

            if current_keys > (maximum_pool_size / 2):
                break

        memory_dict = temp_dict

        time.sleep(3600)


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--config_file', help="Configuration File Memory Bank Servers")
    args = parser.parse_args()

    config = ConfigParser.ConfigParser()
    config.read(args.config_file)

    options = config.options('MBServer')

    opts_dict = {}
    for option in options:
        opts_dict[option] = config.get('MBServer', option)

    print opts_dict
    ip = opts_dict['server_ip']
    port = int(opts_dict['port'])
    maximum_pool_size = int(opts_dict['maximum_pool_size'])

    context = SSL.Context(SSL.SSLv23_METHOD)
    context = ('server.crt', 'server.key')

    thread = threading.Thread(target=trim_memory_dict, args=maximum_pool_size)
    thread.start()

    memory_bank_server.run(debug=True, port=port, host=ip, ssl_context=context)
