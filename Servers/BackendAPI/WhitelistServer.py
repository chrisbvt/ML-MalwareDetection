from flask import Flask, jsonify, request, g, url_for, abort
import datetime
import argparse
import ConfigParser
import redis
from OpenSSL import SSL

SECONDS_IN_HOUR = 4320
whitelist_server = Flask(__name__)
redis_db = None

@whitelist_server.route('/wl')
def index():
    return "Blue Sentry Whitelist"


@whitelist_server.route('/wl/check_whitelist', methods=['POST'])
def check_whitelist():
    global redis_db
    sha1 = request.json.get('sha1')
    md5 = request.json.get('md5')
    if sha1 is None or md5 is None:
        abort(400)

    result = {"Found": 0}
    lookup_string = sha1 + ":md5"
    result_string = redis_db.get(lookup_string)
    if result_string is not None:
        if result_string.replace('"', '') == md5:
            result["Found"] = 1

    return jsonify(result)


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--config_file', help="Configuration File Memory Bank Servers")
    args = parser.parse_args()

    config = ConfigParser.ConfigParser()
    config.read(args.config_file)

    options = config.options('WhitelistServer')

    opts_dict = {}
    for option in options:
        opts_dict[option] = config.get('WhitelistServer', option)

    print opts_dict
    ip = opts_dict['server_ip']
    port = int(opts_dict['port'])
    db_host = opts_dict['db_host']
    db_port = opts_dict['db_port']

    context = SSL.Context(SSL.SSLv23_METHOD)
    context = ('server.crt', 'server.key')
    redis_db = redis.StrictRedis(host=db_host, port=db_port, db=0)
    whitelist_server.run(debug=True, port=port, host=ip, ssl_context=context)
