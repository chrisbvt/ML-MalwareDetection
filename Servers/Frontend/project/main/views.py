# project/main/views.py


#################
#### imports ####
#################
import os
import json
import requests
import pickle
from flask import Blueprint, Flask, jsonify, request, g, url_for, abort, redirect, flash, render_template, current_app
from flask_login import current_user
from flask_login import login_required
from .forms import UploadForm
from werkzeug.utils import secure_filename
from project.indexer_lib import get_metadata_from_file


################
#### config ####
################

main_blueprint = Blueprint('main', __name__,)


################
#### routes ####
################

@main_blueprint.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)

        uploaded_file = request.files['file']
        # if user does not select file, browser also
        # submit a empty part without filename

        if uploaded_file:
            filename = secure_filename(uploaded_file.filename)
            uploaded_file.save(os.path.join(current_app.config['UPLOAD_FOLDER'], filename))
            full_path = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
            sha1, md5, frame = get_metadata_from_file(full_path)
            url = "https://" + current_app.config['ML_SERVER'] + ":" + current_app.config['ML_PORT'] + "/ml/classify_file"
            payload = {'sha1': sha1, 'md5': md5, 'metadata': pickle.dumps(frame)}
            print "Url was: %s" % url
            print "Payload length was: %d" % len(pickle.dumps(frame))
            req = requests.post(url, data=payload, verify=False)
            print "Response was: "
            print req.text
            response_json = json.loads(req.text)
            rating = abs(int(response_json["Malicious"]) - 1)
            print rating
            return render_template('main/analysis.html', sha1=sha1, md5=md5, rating=rating, file_name=filename,
                                    current_user=current_user)
        else:
            return render_template('main/index.html',
                                    message="File failed to upload",
                                    form=UploadForm(), current_user=current_user)

    return render_template('main/index.html', form=UploadForm(), current_user=current_user)


@main_blueprint.route('/about')
def about():
    return render_template('main/about.html', current_user=current_user)


@main_blueprint.route('/terms')
def terms():
    return render_template('main/terms.html', current_user=current_user)

