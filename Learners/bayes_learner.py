import numpy as np
import pandas as pd
import joblib
from IPython.display import display
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve
import argparse
import random

def main():
    parser = argparse.ArgumentParser(description="Bayes Learner for Blue Sentry")
    parser.add_argument("--data_file", help="Data file from FileIndexer", required=True)
    parser.add_argument("--imports_file", help="The file which holds the imports prased via the ImportsIndexer", required=True)
    parser.add_argument("--classifier_write_file", help="File to write the trained classifier to", required=True)
    args = parser.parse_args()
    data_orig = pd.read_csv(args.data_file)
    print "Data loaded!"

    #display(data.describe)

    data = data_orig.sample(frac=1, random_state=40)

    data_features = data['good_file']
    data = data.drop(['good_file'], axis=1)
    #data = data.drop(['file_type'], axis=1)
    data = data.drop(['sha256'], axis=1)
    data_imports = data['imports']
    data = data.drop(['imports'], axis=1)

    text_encoding = open(args.imports_file, 'r').read()

    encoder = CountVectorizer()
    encoder = encoder.fit(text_encoding.split())
    data_imports_encoded = encoder.transform(data_imports)
    testing_size = .2

    scoreVal = np.zeros(10)
    testing_size = .2
    #for i in range(1, 100):
    #    for testing_size in np.arange(.1, 1, .1):

    x_train, x_test, y_train, y_test = train_test_split(data_imports_encoded, data_features, test_size=testing_size, random_state=random.randint(1,100))

    from sklearn.naive_bayes import MultinomialNB
    clf = MultinomialNB().fit(x_train, y_train)
    score = clf.score(x_test, y_test)
    print " Score: " + str(clf.score(x_test, y_test))

    scores = clf.predict(x_test)
    fpr, tpr, thresholds = roc_curve(y_test, scores)
    print "False Positive Rate for " + str(testing_size) + " " + str(fpr)
    print "True Positive Rate for " + str(testing_size) + " " + str(tpr)

    bayes_pred_prob = clf.predict_proba(data_imports_encoded)

    bayes_pred_prob_rounded = []
    for x in range(0, data_imports_encoded.shape[0]):
        bayes_pred_prob_rounded.append(round(bayes_pred_prob[x][1], 8))
        #print round(bayes_pred_prob[x][1], 8)

    # print bayes_pred_probability_rounded

    data['bayes_predictions'] = bayes_pred_prob_rounded

    joblib.dump(clf, args.classifier_write_file)

if __name__ == "__main__":
    main()
